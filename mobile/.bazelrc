# Envoy Mobile Bazel build/test options.
try-import ../.bazelrc

# Common flags for all builds
build --platform_mappings=bazel/platform_mappings
build --define=hot_restart=disabled
build --define=tcmalloc=disabled
build --define=admin_html=disabled
build --define=static_extension_registration=disabled
build --define=admin_functionality=disabled
build --define envoy_mobile_listener=disabled
build --define=library_autolink=disabled
build --define=envoy_mobile_swift_cxx_interop=enabled
build --define=envoy_enable_http_datagrams=disabled
build --experimental_inmemory_dotd_files
build --experimental_inmemory_jdeps_files
build --features=debug_prefix_map_pwd_is_dot
build --features=swift.cacheable_swiftmodules
build --features=swift.debug_prefix_map
build --host_force_python=PY3
build --macos_minimum_os=10.15
build --ios_minimum_os=13.0
build --ios_simulator_version=16.1
build --verbose_failures
build --workspace_status_command=../bazel/get_workspace_status
build --xcode_version=14.1
build --use_top_level_targets_for_symlinks
build --experimental_repository_downloader_retries=2
# We don't have a ton of Swift in Envoy Mobile, so always build with WMO
# This also helps work around a bug in rules_swift: https://github.com/bazelbuild/rules_swift/issues/949
build --swiftcopt=-wmo
# https://github.com/bazelbuild/rules_jvm_external/issues/445
build --repo_env=JAVA_HOME=../bazel_tools/jdk
build --define disable_known_issue_asserts=true
build --define cxxopts=-std=c++17
# Unset per_object_debug_info. Causes failures on Android Linux release builds.
build --features=-per_object_debug_info
# Suppress deprecated declaration warnings due to extensive transitive noise from protobuf.
build --copt -Wno-deprecated-declarations

build:rules_xcodeproj --config=ios
build:rules_xcodeproj --define=apple.experimental.tree_artifact_outputs=0
# Disable global index store to work around https://github.com/buildbuddy-io/rules_xcodeproj/issues/1878
build:rules_xcodeproj --features=-swift.use_global_index_store

# Override PGV validation with NOP functions
build --@com_envoyproxy_protoc_gen_validate//bazel:template-flavor=nop

build:dbg-common --compilation_mode=dbg
# Enable source map for debugging in IDEs
build:dbg-common --copt="-fdebug-compilation-dir" --copt="/proc/self/cwd"

# Default flags for builds targeting iOS
# Manual stamping is necessary in order to get versioning information in the iOS
# static framework.
# More information on stamping can be found here:
# https://github.com/envoyproxy/envoy/tree/master/bazel#enabling-optional-features
build:ios --define=manual_stamp=manual_stamp
build:ios --test_timeout=390,750,1500,5700

# Default flags for builds targeting Android
build:android --define=logger=android

# Default flags for Android debug builds
build:dbg-android --config=dbg-common
build:dbg-android --config=android

# Default flags for iOS debug builds
build:dbg-ios --config=dbg-common
build:dbg-ios --config=ios

# Default flags for Android tests
# TODO(jpsim): Explicitly register test extensions for Android tests
# https://github.com/envoyproxy/envoy/issues/24977
build:test-android --define=static_extension_registration=enabled

# Locally-runnable ASAN config for MacOS & Linux with standard dev environment
# See also:
# https://github.com/bazelbuild/bazel/issues/6932
build:asan-dev --strip=never
build:asan-dev --copt -Wno-macro-redefined # ASAN sets _FORTIFY_SOURCE=0
build:asan-dev --copt -DADDRESS_SANITIZER
build:asan-dev --copt -D_LIBCPP_HAS_NO_ASAN
build:asan-dev --copt -g
build:asan-dev --copt -fno-omit-frame-pointer
build:asan-dev --copt -fno-optimize-sibling-calls
build:asan-dev --copt -fsanitize=address
build:asan-dev --linkopt -fsanitize=address
build:asan-dev --platform_suffix=-asan

build:clang-asan --linkopt --rtlib=compiler-rt
build:clang-asan --linkopt --unwindlib=libgcc

# Locally-runnable TSAN config
build:tsan-dev --features=tsan
build:tsan-dev --copt -fsanitize=thread
build:tsan-dev --linkopt -fsanitize=thread
build:tsan-dev --test_env=ENVOY_IP_TEST_VERSIONS=v4only
build:tsan-dev --platform_suffix=-tsan
# Needed due to https://github.com/libevent/libevent/issues/777
build:tsan-dev --copt -DEVENT__DISABLE_DEBUG_MODE
# https://github.com/abseil/abseil-cpp/issues/760
# https://github.com/google/sanitizers/issues/953
build:tsan-dev --test_env="TSAN_OPTIONS=report_atomic_races=0"

# Exclude debug info from the release binary since it makes it too large to fit
# into a zip file. This shouldn't affect crash reports.
build:release-common --define=no_debug_info=1

# Compile releases optimizing for size (eg -Os, etc).
build:release-common --config=sizeopt

# Set default symbols visibility to hidden to reduce .dynstr and the symbol table size
build:release-common --copt=-fvisibility=hidden

# Disable google_grpc in production by default
build:release-common --define=google_grpc=disabled

# Enable automatic extension factory registration for release builds
build:release-common --define=static_extension_registration=enabled

# Flags for release builds targeting iOS
build:release-ios --config=ios
build:release-ios --config=release-common
build:release-ios --compilation_mode=opt

# Flags for release builds targeting Android or the JVM
# Release does not use the option --define=logger=android
build:release-android --config=release-common
build:release-android --compilation_mode=opt

# Instrument Envoy Mobile's C++ code for coverage
build:coverage --instrumentation_filter="//library/common[/:]"

#############################################################################
# Experimental EngFlow Remote Execution Configs
#############################################################################
# remote-ci-common: These options are valid for any platform, use the configs below
# to add platform-specific options. Avoid using this config directly and
# instead use a platform-specific config
#############################################################################
build:remote-ci-common --config=ci
build:remote-ci-common --config=remote
build:remote-ci-common --google_default_credentials=false
build:remote-ci-common --remote_cache=grpcs://envoy.cluster.engflow.com
build:remote-ci-common --remote_executor=grpcs://envoy.cluster.engflow.com
build:remote-ci-common --bes_backend=grpcs://envoy.cluster.engflow.com/
build:remote-ci-common --bes_results_url=https://envoy.cluster.engflow.com/invocation/
build:remote-ci-common --experimental_credential_helper=%workspace%/bazel/engflow-bazel-credential-helper.sh
build:remote-ci-common --jobs=40
build:remote-ci-common --verbose_failures
build:remote-ci-common --spawn_strategy=remote,sandboxed,local
build:remote-ci-common --grpc_keepalive_time=30s
build:remote-ci-common --remote_timeout=3600s
build:remote-ci-common --bes_timeout=3600s
#############################################################################
# remote-ci-linux: These options are linux-only using GCC by default
#############################################################################
# Common Engflow flags
build:remote-ci-linux --define=EXECUTOR=remote
build:remote-ci-linux --disk_cache=
build:remote-ci-linux --incompatible_strict_action_env=true
# GCC toolchain options
build:remote-ci-linux --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build:remote-ci-linux --crosstool_top=//third_party/rbe_configs/cc:toolchain
build:remote-ci-linux --extra_execution_platforms=//third_party/rbe_configs/config:platform
build:remote-ci-linux --extra_toolchains=//third_party/rbe_configs/config:cc-toolchain
build:remote-ci-linux --host_platform=//third_party/rbe_configs/config:platform
build:remote-ci-linux --platforms=//third_party/rbe_configs/config:platform
build:remote-ci-linux --config=remote-ci-common
#############################################################################
# remote-ci-linux-clang: These options are linux-only using Clang by default
#############################################################################
build:remote-ci-linux-clang --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build:remote-ci-linux-clang --action_env=CC=/opt/llvm/bin/clang
build:remote-ci-linux-clang --action_env=CXX=/opt/llvm/bin/clang++
build:remote-ci-linux-clang --crosstool_top=//third_party/rbe_configs/cc:toolchain
build:remote-ci-linux-clang --extra_execution_platforms=//third_party/rbe_configs/config:platform
build:remote-ci-linux-clang --extra_toolchains=//third_party/rbe_configs/config:cc-toolchain
build:remote-ci-linux-clang --host_platform=//third_party/rbe_configs/config:platform
build:remote-ci-linux-clang --platforms=//third_party/rbe_configs/config:platform
build:remote-ci-linux-clang --config=remote-ci-common
#############################################################################
# remote-ci-linux-asan: These options are Linux-only using Clang and AddressSanitizer
#############################################################################
build:remote-ci-linux-asan --config=clang-asan
build:remote-ci-linux-asan --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build:remote-ci-linux-asan --action_env=CC=/opt/llvm/bin/clang
build:remote-ci-linux-asan --action_env=CXX=/opt/llvm/bin/clang++
build:remote-ci-linux-asan --crosstool_top=//third_party/rbe_configs/cc:toolchain
build:remote-ci-linux-asan --extra_execution_platforms=//third_party/rbe_configs/config:platform-asan
build:remote-ci-linux-asan --extra_toolchains=//third_party/rbe_configs/config:cc-toolchain
build:remote-ci-linux-asan --host_platform=//third_party/rbe_configs/config:platform-asan
build:remote-ci-linux-asan --platforms=//third_party/rbe_configs/config:platform-asan
build:remote-ci-linux-asan --config=remote-ci-common
#############################################################################
# remote-ci-linux-tsan: These options are Linux-only using Clang and ThreadSanitizer
#############################################################################
build:remote-ci-linux-tsan --config=clang-tsan
build:remote-ci-linux-tsan --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build:remote-ci-linux-tsan --action_env=CC=/opt/llvm/bin/clang
build:remote-ci-linux-tsan --action_env=CXX=/opt/llvm/bin/clang++
build:remote-ci-linux-tsan --crosstool_top=//third_party/rbe_configs/cc:toolchain
build:remote-ci-linux-tsan --extra_execution_platforms=//third_party/rbe_configs/config:platform
build:remote-ci-linux-tsan --extra_toolchains=//third_party/rbe_configs/config:cc-toolchain
build:remote-ci-linux-tsan --host_platform=//third_party/rbe_configs/config:platform
build:remote-ci-linux-tsan --platforms=//third_party/rbe_configs/config:platform
build:remote-ci-linux-tsan --config=remote-ci-common
#############################################################################
# remote-ci-linux-coverage: These options are Linux-only using Clang and LLVM coverage
#############################################################################
# Clang environment variables (keep in sync with //third_party/rbe_configs)
build:remote-ci-linux-coverage --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build:remote-ci-linux-coverage --action_env=CC=/opt/llvm/bin/clang
build:remote-ci-linux-coverage --test_env=CC=/opt/llvm/bin/clang
build:remote-ci-linux-coverage --action_env=CXX=/opt/llvm/bin/clang++
build:remote-ci-linux-coverage --test_env=CXX=/opt/llvm/bin/clang++
# Coverage environment variables (keep in sync with //third_party/rbe_configs)
build:remote-ci-linux-coverage --action_env=GCOV=/opt/llvm/bin/llvm-profdata
build:remote-ci-linux-coverage --test_env=GCOV=/opt/llvm/bin/llvm-profdata
build:remote-ci-linux-coverage --action_env=BAZEL_LLVM_COV=/opt/llvm/bin/llvm-cov
build:remote-ci-linux-coverage --test_env=BAZEL_LLVM_COV=/opt/llvm/bin/llvm-cov
build:remote-ci-linux-coverage --action_env=BAZEL_USE_LLVM_NATIVE_COVERAGE=1
build:remote-ci-linux-coverage --test_env=BAZEL_USE_LLVM_NATIVE_COVERAGE=1
# Toolchain flags (Java is required for C++ coverage due to Bazel's LCOV merger)
build:remote-ci-linux-coverage --crosstool_top=//third_party/rbe_configs/cc:toolchain
build:remote-ci-linux-coverage --extra_execution_platforms=//third_party/rbe_configs/config:platform
build:remote-ci-linux-coverage --extra_toolchains=//third_party/rbe_configs/config:cc-toolchain
build:remote-ci-linux-coverage --host_platform=//third_party/rbe_configs/config:platform
build:remote-ci-linux-coverage --platforms=//third_party/rbe_configs/config:platform
# Flags to run tests locally which are necessary since Bazel C++ LLVM coverage isn't fully supported for remote builds
# TODO(lfpino): Reference upstream Bazel issue here on the incompatibility of remote test execution and LLVM coverage.
build:remote-ci-linux-coverage --remote_download_outputs=all
build:remote-ci-linux-coverage --strategy=TestRunner=local,remote
build:remote-ci-linux-coverage --strategy=CoverageReport=local,remote
# Bazel remote caching is incompatible with C++ LLVM coverage so we need to deactivate it for coverage builds
# TODO(lfpino): Reference upstream Bazel issue here on the incompatibility of remote caching and LLVM coverage.
build:remote-ci-linux-coverage --noremote_accept_cached
build:remote-ci-linux-coverage --config=remote-ci-common
build:remote-ci-linux-coverage --build_runfile_links
build:remote-ci-linux-coverage --legacy_important_outputs=false
build:remote-ci-linux-coverage --test_env=CC_CODE_COVERAGE_SCRIPT=external/envoy/bazel/coverage/collect_cc_coverage.sh
build:remote-ci-linux-coverage --nocache_test_results

# IPv6 tests fail on CI
build:remote-ci-linux-coverage --test_env=ENVOY_IP_TEST_VERSIONS=v4only
#############################################################################
# remote-ci-macos: These options are macOS-only
#############################################################################
build:remote-ci-macos --config=remote-ci-common
build:remote-ci-macos --host_platform=//ci/platform:macos
build:remote-ci-macos --platforms=//ci/platform:macos
build:remote-ci-macos --extra_execution_platforms=//ci/platform:macos
build:remote-ci-macos --xcode_version_config=//ci:xcode_config
#############################################################################
# remote-ci-debug: Various Bazel debugging flags
#############################################################################
common:remote-ci-debug --announce_rc
common:remote-ci-debug -s
common:remote-ci-debug -c dbg
common:remote-ci-debug --verbose_failures
common:remote-ci-debug --sandbox_debug
common:remote-ci-debug --action_env=VERBOSE_COVERAGE=true
common:remote-ci-debug --test_env=VERBOSE_COVERAGE=true
common:remote-ci-debug --test_env=DISPLAY_LCOV_CMD=true
#############################################################################
# Experimental EngFlow Remote Execution Configs.
#############################################################################
