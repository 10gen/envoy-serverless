inputs:
  # Authoritative configuration for build image/s
  # TODO(phlax): Move to config
  build_image_repo:
    type: string
    default: envoyproxy/envoy-build-ubuntu
  build_image_sha:
    type: string
    default: 50337314a150ed12447c87c1622eac6f611a069888722fb9a426e21ed161cc26
  build_image_mobile_sha:
    type: string
    default: ca26ff05bd3f3a09468242faaf38ae48315e57f0a87c102352162f95ac620e6f
  build_image_tag:
    type: string
    default: 41c5a05d708972d703661b702a63ef5060125c33

  trusted_bots:
    type: string
    default: |
      trigger-release-envoy[bot]

  check_mobile_run:
    type: boolean
    default: true

outputs:
  build_image_ubuntu:
    value: ${{ steps.build_image.outputs.build_image_ubuntu }}
  build_image_ubuntu_mobile:
    value: ${{ steps.build_image.outputs.build_image_ubuntu_mobile }}
  mobile_android_build:
    value: ${{ steps.should_run.outputs.mobile_android_build }}
  mobile_android_build_all:
    value: ${{ steps.should_run.outputs.mobile_android_build_all }}
  mobile_android_tests:
    value: ${{ steps.should_run.outputs.mobile_android_tests }}
  mobile_asan:
    value: ${{ steps.should_run.outputs.mobile_asan }}
  mobile_cc_tests:
    value: ${{ steps.should_run.outputs.mobile_cc_tests }}
  mobile_compile_time_options:
    value: ${{ steps.should_run.outputs.mobile_compile_time_options }}
  mobile_coverage:
    value: ${{ steps.should_run.outputs.mobile_coverage }}
  mobile_formatting:
    value: ${{ steps.should_run.outputs.mobile_formatting }}
  mobile_ios_build:
    value: ${{ steps.should_run.outputs.mobile_ios_build }}
  mobile_ios_build_all:
    value: ${{ steps.should_run.outputs.mobile_ios_build_all }}
  mobile_ios_tests:
    value: ${{ steps.should_run.outputs.mobile_ios_tests }}
  mobile_release_validation:
    value: ${{ steps.should_run.outputs.mobile_release_validation }}
  mobile_tsan:
    value: ${{ steps.should_run.outputs.mobile_tsan }}
  trusted:
    value: ${{ steps.trusted.outputs.trusted }}
  version_dev:
    value: ${{ steps.context.outputs.version_dev }}
  version_patch:
    value: ${{ steps.context.outputs.version_patch }}

runs:
  using: composite
  steps:
  - id: build_image
    name: 'Check current build images'
    run: |
      {
          echo "build_image_ubuntu=${BUILD_IMAGE_UBUNTU_REPO}:${BUILD_IMAGE_UBUNTU}@sha256:${BUILD_IMAGE_UBUNTU_SHA}"
          echo "build_image_ubuntu_mobile=${BUILD_IMAGE_UBUNTU_REPO}:mobile-${BUILD_IMAGE_UBUNTU}@sha256:${BUILD_IMAGE_UBUNTU_MOBILE_SHA}"
      } >> "$GITHUB_OUTPUT"
    env:
      # TODO(phlax): derive these from a config file
      BUILD_IMAGE_UBUNTU_REPO: ${{ inputs.build_image_repo }}
      BUILD_IMAGE_UBUNTU: ${{ inputs.build_image_tag }}
      BUILD_IMAGE_UBUNTU_SHA: ${{ inputs.build_image_sha }}
      BUILD_IMAGE_UBUNTU_MOBILE_SHA: ${{ inputs.build_image_mobile_sha }}
    shell: bash

  - if: ${{ inputs.check_mobile_run != 'false' }}
    id: should_run
    name: 'Check what to run'
    run: ./mobile/tools/what_to_run.sh
    shell: bash

  - id: context
    name: 'CI context'
    run: |
      VERSION_DEV="$(cat VERSION.txt | cut -d- -f2)"
      VERSION_PATCH="$(cat VERSION.txt | cut -d- -f1 | rev | cut -d. -f1 | rev)"
      {
          echo "version_dev=$VERSION_DEV"
          echo "version_patch=$VERSION_PATCH"
      } >> "$GITHUB_OUTPUT"
    shell: bash

  - id: trusted
    name: 'Check if its a trusted run'
    run: |
      TRUSTED=1
      ACTOR="${{ github.actor }}"
      if [[ "$ACTOR" =~ \[bot\] ]]; then
          TRUSTED_BOT=
          TRUSTED_BOTS=(${{ inputs.trusted_bots }})
          for bot in ${TRUSTED_BOTS[@]}; do
              if [[ "$bot" == "$ACTOR" ]]; then
                  # Trusted bot account, ie non-PR
                  TRUSTED_BOT=1
                  break
              fi
          done
          if [[ -z "$TRUSTED_BOT" ]]; then
              echo "Not trusted bot account"
              TRUSTED=
          fi
      fi
      if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "Not trusted pull_request event"
          TRUSTED=
      fi
      echo "trusted=$TRUSTED" >> "$GITHUB_OUTPUT"
    shell: bash
