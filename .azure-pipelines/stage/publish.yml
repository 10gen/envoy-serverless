
parameters:

- name: bucketGCP
  type: string
  default: ""

## Timeouts
# Workaround for https://github.com/envoyproxy/envoy/issues/26634
- name: timeoutDockerPublish
  displayName: "Timout Docker publish"
  type: number
  # in seconds
  default: 15
- name: timeoutDockerBuild
  displayName: "Timout Docker build"
  type: number
  default: 400

# Auth
- name: authGCP
  type: string
  default: ""
- name: authGithub
  type: string
  default: ""
- name: authGPGPassphrase
  type: string
  default: ""
- name: authGPGPath
  type: string
  default: ""
- name: authGPGKey
  type: string
  default: ""
- name: authNetlifyURL
  type: string
  default: ""
- name: authDockerUser
  type: string
  default: ""
- name: authDockerPassword
  type: string
  default: ""
- name: authSSHDocsKey
  type: string
  default: ""
- name: authSSHDocsKeyPublic
  type: string
  default: ""
- name: authSSHKeyPassphrase
  type: string
  default: ""

- name: runDocker
  displayName: "Run Docker"
  type: string
  default: true
- name: runPackaging
  displayName: "Run Packaging"
  type: string
  default: true
- name: publishNetlify
  displayName: "Publish Netlify"
  type: string
  default: true
- name: publishGithubRelease
  displayName: "Publish Github release"
  type: string
  default: true


jobs:
- job: docker
  displayName: "Docker (Linux multi arch)"
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runDocker }}, 'true'))
  timeoutInMinutes: 120
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - template: ../cached.yml
    parameters:
      name: publish_docker
      # VERSION.txt is included to refresh Docker images for release
      key: "ci/Dockerfile-envoy | VERSION.txt"
      version: "$(cacheKeyDockerBuild)"
      path: ""
  - bash: |
      echo "disk space at beginning of build:"
      df -h
    displayName: "Check disk space at beginning"
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.release"
      itemPattern: "bazel.release/bin/*"
      targetPath: $(Build.StagingDirectory)
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.release.arm64"
      itemPattern: "bazel.release.arm64/bin/*"
      targetPath: $(Build.StagingDirectory)
  - bash: |
      set -e

      mkdir -p linux/amd64 linux/arm64

      # x64
      cp -a $(Build.StagingDirectory)/bazel.release/bin/release.tar.zst linux/amd64/release.tar.zst
      cp -a $(Build.StagingDirectory)/bazel.release/bin/schema_validator_tool linux/amd64/schema_validator_tool

      # arm64
      cp -a $(Build.StagingDirectory)/bazel.release.arm64/bin/release.tar.zst linux/arm64/release.tar.zst
      cp -a $(Build.StagingDirectory)/bazel.release.arm64/bin/schema_validator_tool linux/arm64/schema_validator_tool

      # Debug what files appear to have been downloaded
      find linux -type f -name "*" | xargs ls -l

      ci/docker_ci.sh
    timeoutInMinutes: ${{ parameters.timeoutDockerPublish }}
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZP_BRANCH: $(Build.SourceBranch)
      AZP_SHA1: $(Build.SourceVersion)
      DOCKERHUB_USERNAME: ${{ parameters.authDockerUser }}
      DOCKERHUB_PASSWORD: ${{ parameters.authDockerPassword }}
      DOCKER_BUILD_TIMEOUT: ${{ parameters.timeoutDockerBuild }}
  - bash: |
      echo "disk space at end of build:"
      df -h
    displayName: "Check disk space at end"
    condition: always()
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.StagingDirectory)/build_images"
      artifactName: docker
    timeoutInMinutes: 10
    condition: always()
  - script: sudo .azure-pipelines/docker/save_cache.sh /mnt/docker_cache
    displayName: "Cache/save (publish_docker)"

- job: package_x64
  displayName: Linux debs (x64)
  dependsOn: []
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runPackaging }}, 'true'))
  timeoutInMinutes: 120
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.release"
      itemPattern: "bazel.release/bin/*"
      targetPath: $(Build.StagingDirectory)
  - template: ../bazel.yml
    parameters:
      ciTarget: bazel.distribution
- job: package_arm64
  displayName: Linux debs (arm64)
  dependsOn: []
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runPackaging }}, 'true'))
  timeoutInMinutes: 120
  pool: "envoy-arm-large"
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.release.arm64"
      itemPattern: "bazel.release.arm64/bin/*"
      targetPath: $(Build.StagingDirectory)
  - template: ../bazel.yml
    parameters:
      managedAgent: false
      ciTarget: bazel.distribution
      rbe: false
      artifactSuffix: ".arm64"
      bazelBuildExtraOptions: "--sandbox_base=/tmp/sandbox_base"

- job: success
  dependsOn: ["docker", "package_x64", "package_arm64"]
  displayName: Success (linux artefacts)
  pool:
    vmImage: "ubuntu-20.04"
  # This condition ensures that this (required) check passes if all of
  # the preceding checks either pass or are skipped
  # adapted from:
  #   https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#job-to-job-dependencies-within-one-stage
  condition: |
    and(
      in(dependencies.docker.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.package_x64.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.package_arm64.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))
  steps:
  - checkout: none
  - bash: |
      echo "building publishable assets complete"

- job: docs
  displayName: Publish docs to netlify
  dependsOn: ["success"]
  condition: |
    and(not(canceled()),
        eq(${{ parameters.publishNetlify }}, 'true'))
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - task: Cache@2
    inputs:
      key: 'docs | $(cacheKeyBazelFiles)'
      path: $(Build.StagingDirectory)/repository_cache
    continueOnError: true

  - script: ci/run_envoy_docker.sh 'ci/do_ci.sh docs'
    workingDirectory: $(Build.SourcesDirectory)
    env:
      ENVOY_RBE: "true"
      BAZEL_BUILD_EXTRA_OPTIONS: "--config=remote-ci --jobs=$(RbeJobs)"
      AZP_BRANCH: $(Build.SourceBranch)
      ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
      BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
      BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
      GCP_SERVICE_ACCOUNT_KEY: ${{ parameters.authGCP }}
    displayName: "Generate docs"

  - script: |
      bazel run //tools/distribution:update_dockerhub_repository
    displayName: "Publish Dockerhub description and README"
    env:
      DOCKERHUB_USERNAME: ${{ parameters.authDockerUser }}
      DOCKERHUB_PASSWORD: ${{ parameters.authDockerPassword }}
    condition: and(eq(variables['isMain'], 'true'), eq(variables['PostSubmit'], true))

  - script: |
      ci/run_envoy_docker.sh 'ci/upload_gcs_artifact.sh /source/generated/docs docs'
    displayName: "Upload Docs to GCS"
    env:
      ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
      GCP_SERVICE_ACCOUNT_KEY: ${{ parameters.authGCP }}
      GCS_ARTIFACT_BUCKET: ${{ parameters.bucketGCP }}
    condition: eq(variables['isMain'], 'true')

  - task: InstallSSHKey@0
    inputs:
      hostName: $(authGithubSSHKeyPublic)
      sshPublicKey: "${{ parameters.authSSHDocsKeyPublic }}"
      sshPassphrase: "${{ parameters.authSSHKeyPassphrase }}"
      sshKeySecureFile: "${{ parameters.authSSHDocsKey }}"

  - script: docs/publish.sh
    displayName: "Publish to GitHub"
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZP_BRANCH: $(Build.SourceBranch)
      NETLIFY_TRIGGER_URL: ${{ parameters.authNetlifyURL }}

- job: github
  displayName: Publish release tag
  dependsOn: ["docs"]
  condition: |
    and(not(canceled()),
        eq(${{ parameters.publishGithubRelease }}, 'true'))
  pool:
    vmImage: "ubuntu-20.04"
  steps:

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.release"
      itemPattern: "bazel.release/bin/*"
      targetPath: $(Build.StagingDirectory)
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.release.arm64"
      itemPattern: "bazel.release.arm64/bin/*"
      targetPath: $(Build.StagingDirectory)

  - task: DownloadSecureFile@1
    name: MaintainerGPGKey
    displayName: 'Download maintainer GPG key'
    inputs:
      # NB: This is the path to the key and **must** be set on a per-pipeline basis
      secureFile: '${{ parameters.authGPGKey }}'

  - script: ./ci/run_envoy_docker.sh './ci/do_ci.sh publish'
    displayName: "Publish release to Github"
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZP_BRANCH: $(Build.SourceBranch)
      GITHUB_TOKEN: ${{ parameters.authGithub }}

  # TODO(phlax): combine this with publish step
  - bash: |
      set -e

      VERSION="$(cat VERSION.txt)"

      mkdir -p linux/amd64 linux/arm64 publish

      # linux/amd64
      tar xf $(Build.StagingDirectory)/bazel.release/release.tar.zst -C ./linux/amd64
      cp -a linux/amd64/envoy "publish/envoy-${VERSION}-linux-x86_64"
      cp -a linux/amd64/envoy-contrib "publish/envoy-contrib-${VERSION}-linux-x86_64"

      # linux/arm64
      tar xf $(Build.StagingDirectory)/bazel.release.arm64/release.tar.zst -C ./linux/arm64
      cp -a linux/arm64/envoy "publish/envoy-${VERSION}-linux-aarch_64"
      cp -a linux/arm64/envoy-contrib "publish/envoy-contrib-${VERSION}-linux-aarch_64"

      echo "$MAINTAINER_GPG_KEY_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --import "$MAINTAINER_GPG_KEY_PATH"

      ci/publish_github_assets.sh "v${VERSION}" "${PWD}/publish"
    workingDirectory: $(Build.SourcesDirectory)
    env:
      GITHUB_TOKEN: ${{ parameters.authGithub }}
      MAINTAINER_GPG_KEY_PASSPHRASE: ${{ parameters.authGPGPassphrase }}
      MAINTAINER_GPG_KEY_PATH: ${{ parameters.authGPGPath }}
