
parameters:
- name: authGCP
  type: string
  default: ""
- name: authSSHKeyPassphrase
  type: string
  default: ""
- name: authSSHDataPlaneApiKey
  type: string
  default: ""
- name: authSSHDataPlaneApiKeyPublic
  type: string
  default: ""
- name: authSSHGoControlPlaneKey
  type: string
  default: ""
- name: authSSHGoControlPlaneKeyPublic
  type: string
  default: ""
- name: authSSHFilterExampleKey
  type: string
  default: ""
- name: authSSHFilterExampleKeyPublic
  type: string
  default: ""


jobs:
- job: filter_example
  dependsOn: []
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
  - task: InstallSSHKey@0
    inputs:
      hostName: $(authGithubSSHKeyPublic)
      sshPublicKey: "${{ parameters.authSSHFilterExampleKeyPublic }}"
      sshPassphrase: "${{ parameters.authSSHKeyPassphrase }}"
      sshKeySecureFile: "${{ parameters.authSSHFilterExampleKey }}"
  - bash: ci/filter_example_mirror.sh
    displayName: "Sync envoy-filter-example"
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZP_BRANCH: $(Build.SourceBranch)

- job: data_plane_api
  dependsOn: []
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
  - task: InstallSSHKey@0
    inputs:
      hostName: $(authGithubSSHKeyPublic)
      sshPublicKey: "${{ parameters.authSSHDataPlaneApiKeyPublic }}"
      sshPassphrase: "${{ parameters.authSSHKeyPassphrase }}"
      sshKeySecureFile: "${{ parameters.authSSHDataPlaneApiKey }}"
  - bash: ci/api_mirror.sh
    displayName: "Sync data-plane-api"
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZP_BRANCH: $(Build.SourceBranch)

- job: go_control_plane
  dependsOn: []
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
  - task: InstallSSHKey@0
    inputs:
      hostName: $(authGithubSSHKeyPublic)
      sshPublicKey: "${{ parameters.authSSHGoControlPlaneKeyPublic }}"
      sshPassphrase: "${{ parameters.authSSHKeyPassphrase }}"
      sshKeySecureFile: "${{ parameters.authSSHGoControlPlaneKey }}"
  - bash: |
      cp -a ~/.ssh $(Build.StagingDirectory)/
      ci/run_envoy_docker.sh 'ci/go_mirror.sh'
    displayName: "Sync go-control-plane"
    workingDirectory: $(Build.SourcesDirectory)
    env:
      ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
      # TODO: make into parameters
      BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
      BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
      GCP_SERVICE_ACCOUNT_KEY: ${{ parameters.authGCP }}
      AZP_BRANCH: $(Build.SourceBranch)
