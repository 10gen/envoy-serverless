parameters:
- name: bucketGCP
  type: string
  default: ""
- name: concurrencyPrechecks
  displayName: "Prechecks concurrency"
  type: number
  default: 10
- name: cacheTestResults
  displayName: "Cache test results"
  type: boolean
  default: true

- name: checkDeps
  displayName: "Run dependency checker"
  type: string
  default: false

# Auth
- name: authGithub
  type: string
  default: ""
- name: authGCP
  type: string
  default: ""


jobs:
- job: prechecks
  displayName: Precheck
  timeoutInMinutes: 20
  pool:
    vmImage: "ubuntu-20.04"
  variables:
    CI_TARGET: ""
  strategy:
    maxParallel: ${{ parameters.concurrencyPrechecks }}
    matrix:
      format:
        CI_TARGET: "format"
      protobuf:
        CI_TARGET: "check_and_fix_proto_format"
      publishing:
        CI_TARGET: docs
  steps:
  - template: ../bazel.yml
    parameters:
      ciTarget: $(CI_TARGET)
      cacheTestResults: ${{ parameters.cacheTestResults }}
      cacheVersion: $(cacheKeyBazel)
      publishEnvoy: false
      publishTestResults: false
      stepsPost:

      # Format fixes
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/fix_format.diff"
          artifactName: format
        timeoutInMinutes: 10
        # not all have fixes so improve condition/handling
        condition: and(failed(), eq(variables['CI_TARGET'], 'format'))
      # Protobuf fixes
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/fix_proto_format.diff"
          artifactName: format
        timeoutInMinutes: 10
        condition: and(failed(), eq(variables['CI_TARGET'], 'check_and_fix_proto_format'))

      # Publish docs
      - script: |
          ci/run_envoy_docker.sh 'ci/upload_gcs_artifact.sh /source/generated/docs docs'
        displayName: "Upload Docs to GCS"
        env:
          ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
          GCP_SERVICE_ACCOUNT_KEY: ${{ parameters.authGCP }}
          GCS_ARTIFACT_BUCKET: ${{ parameters.bucketGCP }}
        condition: eq(variables['CI_TARGET'], 'docs')

      # Docker regression tests
      - script: |
          DOCKER_CI_FIX_DIFF=$(Build.StagingDirectory)/fix_docker.diff DOCKER_CI_FIX=1 ci/test_docker_ci.sh
        workingDirectory: $(Build.SourcesDirectory)
        displayName: Docker build regression test
        condition: eq(variables['CI_TARGET'], 'docs')
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/fix_docker.diff"
          artifactName: "docker_ci"
        timeoutInMinutes: 10
        condition: and(failed(), eq(variables['CI_TARGET'], 'docs'))

- job: dependencies
  displayName: Precheck dependencies
  timeoutInMinutes: 20
  pool:
    vmImage: "ubuntu-20.04"
  condition: |
    and(not(canceled()),
        eq(${{ parameters.checkDeps }}, 'true'))
  steps:
  - template: ../bazel.yml
    parameters:
      ciTarget: deps
      cacheTestResults: ${{ parameters.cacheTestResults }}
      cacheVersion: $(cacheKeyBazel)
      publishEnvoy: false
      publishTestResults: false
      authGithub: ${{ parameters.authGithub }}

- job: prechecked
  displayName: Prechecked
  dependsOn: ["prechecks", "dependencies"]
  pool:
    vmImage: "ubuntu-20.04"
  # This condition ensures that this (required) job passes if all of
  # the preceeding jobs either pass or are skipped
  # adapted from:
  #   https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#job-to-job-dependencies-within-one-stage
  condition: |
    and(
      eq(variables['Build.Reason'], 'PullRequest'),
      in(dependencies.dependencies.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.prechecks.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))
  steps:
  - checkout: none
  - bash: |
      echo "Prechecked"
