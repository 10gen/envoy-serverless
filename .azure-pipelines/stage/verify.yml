
parameters:

- name: bucketGCP
  type: string
  default: ""

# Auth
- name: authGCP
  type: string
  default: ""

jobs:
- job: examples
  displayName: Examples (Docker/x64)
  condition: and(not(canceled()), succeeded(), ne(stageDependencies.env.repo.outputs['changed.mobileOnly'], 'true'), ne(stageDependencies.env.repo.outputs['changed.docsOnly'], 'true'))
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - bash: .azure-pipelines/cleanup.sh
    displayName: "Removing tools from agent"
  - bash: |
      set -e

      if [[ "$BUILD_REASON" == "PullRequest" ]]; then
          DOWNLOAD_PATH="$(git rev-parse HEAD | head -c7)"
      else
          DOWNLOAD_PATH="${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER:-${BUILD_SOURCEBRANCHNAME}}"
      fi

      tmpdir=$(mktemp -d)
      cd "$tmpdir"
      images=("" "contrib" "google-vrp")
      for image in "${images[@]}"; do
          if [[ -n "$image" ]]; then
              variant="${image}-dev"
              filename="envoy-${image}.tar"
          else
              variant=dev
              filename="envoy.tar"
          fi
          echo "Download docker image (https://storage.googleapis.com/${{ parameters.bucketGCP }}/${DOWNLOAD_PATH}/docker/${filename}) ..."
          curl -sLO "https://storage.googleapis.com/${{ parameters.bucketGCP }}/${DOWNLOAD_PATH}/docker/${filename}"
          echo "Copy oci image: oci-archive:${filename} docker-daemon:envoyproxy/envoy:${variant}"
          skopeo copy -q "oci-archive:${filename}" "docker-daemon:envoyproxy/envoy:${variant}"
          rm "$filename"
      done
      docker images | grep envoy

  - bash: |
      set -e
      export DEBIAN_FRONTEND=noninteractive
      sudo apt-get -qq update -y
      sudo apt-get -qq install -y --no-install-recommends expect

  - bash: ./ci/do_ci.sh verify_examples
    env:
      ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
      NO_BUILD_SETUP: 1
      # ENVOY_EXAMPLES_DEBUG: 1

- job: packages_x64
  displayName: Debs (x64)
  condition: and(not(canceled()), succeeded(), ne(stageDependencies.env.repo.outputs['changed.mobileOnly'], 'true'), ne(stageDependencies.env.repo.outputs['changed.docsOnly'], 'true'), ne(stageDependencies.env.repo.outputs['changed.examplesOnly'], 'true'))
  timeoutInMinutes: 120
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.distribution"
      itemPattern: "bazel.distribution/x64/packages.x64.tar.gz"
      downloadType: single
      targetPath: $(Build.StagingDirectory)
  - script: ci/run_envoy_docker.sh 'ci/do_ci.sh verify_distro'
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZP_BRANCH: $(Build.SourceBranch)
      ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
      ENVOY_DOCKER_IN_DOCKER: 1
      BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
      BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
      GCP_SERVICE_ACCOUNT_KEY: ${{ parameters.authGCP }}
    displayName: "Verify packages"
- job: packages_arm64
  displayName: Debs (arm64)
  condition: and(not(canceled()), succeeded(), ne(stageDependencies.env.repo.outputs['changed.mobileOnly'], 'true'), ne(stageDependencies.env.repo.outputs['changed.docsOnly'], 'true'), ne(stageDependencies.env.repo.outputs['changed.examplesOnly'], 'true'))
  timeoutInMinutes: 120
  pool: "envoy-arm-large"
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "bazel.distribution"
      itemPattern: "bazel.distribution/arm64/packages.arm64.tar.gz"
      downloadType: single
      targetPath: $(Build.StagingDirectory)
  - script: ci/run_envoy_docker.sh 'ci/do_ci.sh verify_distro'
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZP_BRANCH: $(Build.SourceBranch)
      ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
      ENVOY_DOCKER_IN_DOCKER: 1
      BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
      BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
      GCP_SERVICE_ACCOUNT_KEY: ${{ parameters.authGCP }}
    displayName: "Verify packages"

- job: verified
  displayName: Verification complete
  dependsOn: ["examples", "packages_x64", "packages_arm64"]
  pool:
    vmImage: "ubuntu-20.04"
  # This condition ensures that this (required) check passes if all of
  # the preceding checks either pass or are skipped
  # adapted from:
  #   https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#job-to-job-dependencies-within-one-stage
  condition: |
    and(
      eq(variables['Build.Reason'], 'PullRequest'),
      in(dependencies.examples.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.packages_x64.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.packages_arm64.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))
  steps:
  - checkout: none
  - bash: |
      echo "checks complete"
