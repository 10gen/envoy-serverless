
parameters:
- name: name
  type: string
  default: envoy_build_image
- name: version
  type: string
  default: ""
- name: arch
  type: string
  default: ""
- name: key
  type: string
  default: ".devcontainer/Dockerfile"
- name: tmpDirectory
  type: string
  default: /mnt/docker_cache
- name: path
  type: string
  default: /mnt/docker
- name: cacheTimeoutWorkaround
  type: number
  default: 5
- name: prime
  type: boolean
  default: false


steps:
- script: sudo .azure-pipelines/docker/prepare_cache.sh "${{ parameters.tmpDirectory }}"
  displayName: "Cache/prepare (${{ parameters.name }})"
- task: Cache@2
  env:
    VSO_DEDUP_REDIRECT_TIMEOUT_IN_SEC: "${{ parameters.cacheTimeoutWorkaround }}"
  displayName: "Cache/fetch (${{ parameters.name }})"
  inputs:
    key: '${{ parameters.name }} | "${{ parameters.version }}" | "${{ parameters.arch }}" | ${{ parameters.key }}'
    path: "${{ parameters.tmpDirectory }}"
    cacheHitVar: CACHE_RESTORED

# Prime the cache for all jobs
- script: sudo .azure-pipelines/docker/prime_cache.sh "${{ parameters.tmpDirectory }}" "${{ parameters.arch }}"
  displayName: "Cache/prime (${{ parameters.name }})"
  # TODO(phlax): figure if there is a way to test cache without downloading it
  condition: and(not(canceled()), eq(${{ parameters.prime }}, true), ne(variables.CACHE_RESTORED, 'true'))

# Load the cache for a job
- script: sudo .azure-pipelines/docker/load_cache.sh "${{ parameters.tmpDirectory }}" "${{ parameters.path }}"
  displayName: "Cache/restore (${{ parameters.name }})"
  condition: and(not(canceled()), eq(${{ parameters.prime }}, false))
