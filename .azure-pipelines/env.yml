#
# Note to use the outputs created here - this `stage` must be set as a dependency in the relevant stage
# eg:
#
# stage: mystage
# dependsOn: ["env"]
#
# To use a variable as a condition for a `stage` you can specify it as follows:
#
# condition: and(not(canceled()), succeeded(), ne(dependencies.env.outputs['repo.changed.mobileOnly'], 'true'))
#
# To use a variable as a condition for a `job` you can specify it as follows:
#
# job:
#   condition: and(not(canceled()), succeeded(), ne(stageDependencies.env.repo.outputs['changed.mobileOnly'], 'true'))
#
# NB: Avoid using _inclusive_ lists to trigger CI - eg _dont_ only trigger mobile CI if `mobile/` changed.
#  Instead use _exclusive_ bools - eg _do_ suppress other CI if only `mobile/` changed
#
# Note the difference in name resolution when used in stages and jobs.
#
# Note also, other conditions such as `not(canceled())` are not assumed and so need to be added to
# any conditions explicitly.
#
# To use a variable in a `step` you can specify it as follows:
#
# stage: my_next_stage
#   jobs:
#     job: another_job
#     variables:
#       mobileOnly: $[stageDependencies.env.repo.outputs['changed.mobileOnly']]
#     steps:
#     - bash: echo $(mobileOnly)
#

jobs:
# Warm build image caches
- job: cache
  displayName: Cache
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - template: cached.yml
    parameters:
      version: "$(cacheKeyBuildImage)"
      prime: true
- job: cache_arm
  dependsOn: []
  displayName: Cache (arm64)
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - template: cached.yml
    parameters:
      prime: true
      arch: .arm64
      version: "$(cacheKeyBuildImage)"

- job: repo
  dependsOn: []
  displayName: Repository
  pool:
    vmImage: "ubuntu-20.04"
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
  - bash: |
      # TODO(phlax): move this to a script to ensure proper linting etc
      set -e

      # Only exclude checks in pull requests.
      if [[ $(Build.Reason) != "PullRequest" ]]; then
          echo "##vso[task.setvariable variable=mobileOnly;isoutput=true]false"
          echo "##vso[task.setvariable variable=docsOnly;isoutput=true]false"
          echo "##vso[task.setvariable variable=examplesOnly;isoutput=true]false"
          echo "##vso[task.setvariable variable=requirements;isoutput=true]true"
          exit 0
      fi

      CHANGE_TARGET="origin/$(System.PullRequest.TargetBranch)"

      echo "Comparing changes ${CHANGE_TARGET}...HEAD"
      CHANGED_PATHS="$(git diff --name-only ${CHANGE_TARGET}...HEAD | cut -d/ -f1 | sort -u | jq -sR 'rtrimstr("\n") | split("\n")')"
      echo "$CHANGED_PATHS" | jq '.'
      CHANGED_PATH_COUNT=$(echo $CHANGED_PATHS | jq '. | length')
      CHANGED_MOBILE_ONLY=false
      CHANGED_DOCS_ONLY=false
      CHANGED_EXAMPLES_ONLY=false

      CHANGED_MOBILE=$(echo $CHANGED_PATHS | jq '. as $A | "mobile" | IN($A[])')
      if [[ $CHANGED_MOBILE == true && $CHANGED_PATH_COUNT -eq 1 ]]; then
          CHANGED_MOBILE_ONLY=true
      fi
      CHANGED_DOCS=$(echo $CHANGED_PATHS | jq '. as $A | "docs" | IN($A[])')
      if [[ $CHANGED_DOCS == true && $CHANGED_PATH_COUNT -eq 1 ]]; then
          CHANGED_DOCS_ONLY=true
      fi
      CHANGED_EXAMPLES=$(echo $CHANGED_PATHS | jq '. as $A | "examples" | IN($A[])')
      if [[ $CHANGED_EXAMPLES == true && $CHANGED_PATH_COUNT -eq 1 ]]; then
          CHANGED_EXAMPLES_ONLY=true
      fi

      echo "##vso[task.setvariable variable=mobileOnly;isoutput=true]${CHANGED_MOBILE_ONLY}"
      echo "##vso[task.setvariable variable=docsOnly;isoutput=true]${CHANGED_DOCS_ONLY}"
      echo "##vso[task.setvariable variable=examplesOnly;isoutput=true]${CHANGED_EXAMPLES_ONLY}"

      CHANGED_REQUIREMENT_PATHS="$(git diff --name-only ${CHANGE_TARGET}...HEAD | grep -E '\.*requirements.*\.txt$|go.mod$|\.*\.bzl$|^WORKSPACE$' || echo '')"

      if [[ -n "$CHANGED_REQUIREMENT_PATHS" ]]; then
          CHANGED_REQUIREMENTS=true
      else
          CHANGED_REQUIREMENTS=false
      fi

      echo "##vso[task.setvariable variable=requirements;isoutput=true]${CHANGED_REQUIREMENTS}"

    displayName: "Detect repo changes"
    workingDirectory: $(Build.SourcesDirectory)
    name: changed

  - bash: |
      set -e
      VERSION_DEV="$(cat VERSION.txt | cut -d- -f2)"
      if [[ $VERSION_DEV == "dev" ]]; then
          echo "##vso[task.setvariable variable=isDev;isoutput=true]true"
      else
          if [[ $(Build.Reason) == "PullRequest" ]]; then
              # Check to make sure that it was this PR that changed the version, otherwise fail
              # as the branch needs to be reopened first.
              # NB: this will not stop a PR that has already passed checks from being landed.
              DIFF_TARGET_BRANCH="origin/$(System.PullRequest.TargetBranch)"
              DIFF_REF="$(git merge-base HEAD "${DIFF_TARGET_BRANCH}")"
              CHANGES="$(git diff "$DIFF_REF" HEAD VERSION.txt)"
              if [[ -z "$CHANGES" ]]; then
                  echo "VERSION.txt is not a development version. Please re-open the branch before making further changes" >&2
                  exit 1
              fi
          fi
          echo "##vso[task.setvariable variable=isDev;isoutput=true]false"
      fi
    displayName: Set development/release env
    name: state

  - bash: |
      set -e

      echo "env.outputs['changed.mobileOnly']: $(changed.mobileOnly)"
      echo "env.outputs['changed.docsOnly']: $(changed.docsOnly)"
      echo "env.outputs['changed.examplesOnly']: $(changed.examplesOnly)"
      echo
      echo "env.outputs['changed.requirements']: $(changed.requirements)"
      echo
      echo "env.outputs['state.isDev']: $(state.isDev)"
    displayName: "Print build environment"
