parameters:
- name: ciTarget
  displayName: "CI target"
  type: string
  default: bazel.release
- name: artifactSuffix
  displayName: "Suffix of artifact"
  type: string
  default: ""
- name: cacheKey
  type: string
  default: $(cacheKeyBazelFiles)
- name: cacheVersion
  type: string
  default: $(cacheKeyBazel)
- name: rbe
  displayName: "Enable RBE"
  type: boolean
  default: true
- name: managedAgent
  type: boolean
  default: true
- name: bazelBuildExtraOptions
  type: string
  default: ""
- name: envoyBuildFilterExample
  type: string
  default: ""
- name: cacheTestResults
  displayName: "Cache test results"
  type: boolean
  default: true
# Unfortunately, AZP is an unmittigated and undocumented disaster.
# The definition of primitive types is close to pointless, as depending
# on where things are set, azp just turns them into strings anyway.
- name: repoFetchDepth
  type: string
  default: 1
- name: repoFetchTags
  type: string
  default: false
# Auth
- name: authGithub
  type: string
  default: ""
# Publishing
- name: publishEnvoy
  type: string
  default: true
- name: publishTestResults
  type: string
  default: true

- name: stepsPre
  type: stepList
  default: []
- name: stepsPost
  type: stepList
  default: []


steps:
- checkout: self
  fetchDepth: ${{ parameters.repoFetchDepth }}
  fetchTags: ${{ parameters.repoFetchTags }}

# Set up tmpfs directories for self-hosted agents which have a surplus of mem.
#
# NB: Do not add any directory that grow larger than spare memory capacity!
- bash: |
    TMPDIRS=(
        # This is used as the final delivery directory for the binaries
        "$(Build.StagingDirectory)/envoy"
        # Bazel repository_cache which is cached by AZP (this speeds up cache load/save)
        "$(Build.StagingDirectory)/repository_cache"
        "$(Build.StagingDirectory)/bazel"
        "$(Build.StagingDirectory)/.cache"
        "$(Build.StagingDirectory)/bazel_root/install"
        "$(Build.StagingDirectory)/tmp"
        "$(Build.StagingDirectory)/bazel_root/base/external")
    if [[ "${{ parameters.artifactSuffix }}" == ".arm64" ]]; then
        TMPDIRS+=(
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/aarch64-fastbuild/testlogs"
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/aarch64-opt/testlogs")
    else
        TMPDIRS+=(
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/k8-fastbuild/testlogs"
            "$(Build.StagingDirectory)/bazel_root/base/execroot/envoy/bazel-out/k8-opt/testlogs")
    fi
    for tmpdir in "${TMPDIRS[@]}"; do
        echo "Mount(tmpfs): ${tmpdir}"
        sudo mkdir -p "$tmpdir"
        sudo mount -t tmpfs none "$tmpdir"
        sudo chown azure-pipelines "$tmpdir"
    done
    sudo chown -R azure-pipelines:azure-pipelines $(Build.StagingDirectory)/bazel_root/
  displayName: "Mount/tmpfs bazel directories"
  condition: and(succeeded(), eq('${{ parameters.managedAgent }}', false))

- bash: |
    set -e
    CACHE_DIRS=(
        "$(Build.StagingDirectory)/.cache/"
        "$(Build.StagingDirectory)/bazel_root/install/"
        "$(Build.StagingDirectory)/repository_cache/"
        "$(Build.StagingDirectory)/bazel_root/base/external")
    sudo mkdir -p "${CACHE_DIRS[@]}"
    sudo chown -R vsts:vsts "${CACHE_DIRS[@]}" $(Build.StagingDirectory)/bazel_root/
    echo "Created bazel cache directories: "${CACHE_DIRS[*]}""
  displayName: "Create bazel directories"
  condition: and(succeeded(), eq('${{ parameters.managedAgent }}', true))

# Caching
- task: Cache@2
  inputs:
    key: '"${{ parameters.ciTarget }}" | "${{ parameters.cacheVersion }}" | "${{ parameters.artifactSuffix }}" | ${{ parameters.cacheKey }}'
    path: $(Build.StagingDirectory)/bazel
    cacheHitVar: BAZEL_CACHE_RESTORED
  continueOnError: true
- script: |
    set -e
    sudo tar xf $(Build.StagingDirectory)/bazel/cache.tar.zst -C $(Build.StagingDirectory) --warning=no-timestamp
    sudo rm -rf $(Build.StagingDirectory)/bazel/*
  displayName: "Cache/restore (${{ parameters.ciTarget }})"
  condition: and(not(canceled()), eq(variables.BAZEL_CACHE_RESTORED, 'true'))
- template: cached.yml
  parameters:
    version: "$(cacheKeyBuildImage)"
    arch: "${{ parameters.artifactSuffix }}"

- ${{ each step in parameters.stepsPre }}:
  - ${{ each pair in step }}:
      ${{ pair.key }}: ${{ pair.value }}

- bash: |
    echo "disk space at beginning of build:"
    df -h
  displayName: "Check disk space at beginning"

- bash: |
    sudo mkdir -p /etc/docker
    echo '{
      "ipv6": true,
      "fixed-cidr-v6": "2001:db8:1::/64"
    }' | sudo tee /etc/docker/daemon.json
    sudo service docker restart
  displayName: "Enable IPv6"
  condition: ${{ parameters.managedAgent }}

- script: ci/run_envoy_docker.sh 'ci/do_ci.sh ${{ parameters.ciTarget }}'
  workingDirectory: $(Build.SourcesDirectory)
  env:
    ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
    SLACK_TOKEN: $(SLACK_TOKEN)
    REPO_URI: $(Build.Repository.Uri)
    BUILD_URI: $(Build.BuildUri)
    ENVOY_BUILD_FILTER_EXAMPLE: ${{ parameters.envoyBuildFilterExample }}
    GITHUB_TOKEN: "${{ parameters.authGithub }}"
    ${{ if ne(parameters['cacheTestResults'], true) }}:
      BAZEL_NO_CACHE_TEST_RESULTS: 1
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      AZP_TARGET_BRANCH: "origin/$(System.PullRequest.TargetBranch)"
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      AZP_TARGET_BRANCH: "origin/$(Build.SourceBranchName)"
    # Any PR or CI run in envoy-presubmit uses the fake SCM hash
    ${{ if or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.DefinitionName'], 'envoy-presubmit')) }}:
      # sha1sum of `ENVOY_PULL_REQUEST`
      BAZEL_FAKE_SCM_REVISION: e3b4a6e9570da15ac1caffdded17a8bebdc7dfc9
    ${{ if parameters.rbe }}:
      GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
      ENVOY_RBE: "1"
      BAZEL_BUILD_EXTRA_OPTIONS: "--config=remote-ci --jobs=$(RbeJobs) ${{ parameters.bazelBuildExtraOptions }}"
      BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
      BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
    ${{ if eq(parameters.rbe, false) }}:
      BAZEL_BUILD_EXTRA_OPTIONS: "--config=ci ${{ parameters.bazelBuildExtraOptions }}"
      BAZEL_REMOTE_CACHE: $(LocalBuildCache)
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        BAZEL_REMOTE_INSTANCE_BRANCH: "$(System.PullRequest.TargetBranch)"
      ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        BAZEL_REMOTE_INSTANCE_BRANCH: "$(Build.SourceBranchName)"
  displayName: "Run CI script ${{ parameters.ciTarget }}"

- bash: |
    echo "disk space at end of build:"
    df -h

    echo
    du -ch "$(Build.StagingDirectory)" | grep -E "[0-9]{2,}M|[0-9]G"

    # Cleanup offending files with unicode names
    rm -rf $(Build.StagingDirectory)/bazel_root/base/external/go_sdk/test/fixedbugs
  displayName: "Check disk space at end"
  condition: not(canceled())

- ${{ each step in parameters.stepsPost }}:
  - ${{ each pair in step }}:
      ${{ pair.key }}: ${{ pair.value }}

- script: |
    set -e
    CACHE_DIRS=(
        ".cache"
        "bazel_root/install"
        "repository_cache/"
        "bazel_root/base/external")
    mkdir -p $(Build.StagingDirectory)/bazel/
    sudo tar cf - -C $(Build.StagingDirectory) "${CACHE_DIRS[@]}" \
        | zstd - -T0 -o $(Build.StagingDirectory)/bazel/cache.tar.zst
    echo "Created tarball ($(Build.StagingDirectory)/bazel/cache.tar.zst): ${CACHE_DIRS[@]}"
  displayName: "Cache/save (${{ parameters.ciTarget }})"
  condition: and(not(canceled()), ne(variables.BAZEL_CACHE_RESTORED, 'true'))

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/bazel-out/**/testlogs/**/test.xml"
    testRunTitle: "${{ parameters.ciTarget }}"
    searchFolder: $(Build.StagingDirectory)/bazel_root
  timeoutInMinutes: 10
  condition: eq(${{ parameters.publishTestResults }}, 'true')
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: "$(Build.StagingDirectory)/envoy"
    artifactName: ${{ parameters.ciTarget }}
  timeoutInMinutes: 10
  condition: eq(${{ parameters.publishEnvoy }}, 'true')
